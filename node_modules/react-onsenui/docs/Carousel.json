{"description":"@original ons-carousel\n@category carousel\n@tutorial react/Reference/carousel\n@description\n[en] Carousel component. A carousel can be used to display several items in the same space.\n    The component supports displaying content both horizontally and vertically. The user can scroll through the items by dragging and it can also be controller programmatically.\n [/en]\n[jp][/jp]\n@example\n   <Carousel\n          onPostChange={() => console.log('onPostChange')}\n          onOverscroll={() => console.log('onOverscroll')}\n          onRefresh={() => console.log('onRefresh')}\n          ref='carousel' swipeable overscrollable autoScroll fullscreen autoScrollRatio={0.2}>\n          <CarouselItem style={{backgroundColor: 'gray'}}>\n            <div className='item-label'>GRAY</div>\n          </CarouselItem>\n          <CarouselItem style={{backgroundColor: '#085078'}}>\n            <div className='item-label'>BLUE</div>\n          </CarouselItem>\n        </Carousel>","methods":[{"name":"_getDomNodeName","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"direction":{"type":{"name":"enum","value":[{"value":"'horizontal'","computed":false},{"value":"'vertical'","computed":false}]},"required":false,"description":"@name direction\n@type string\n@required false\n@description\n [en]The direction of the carousel. Can be either \"horizontal\" or \"vertical\". Default is \"horizontal\".[/en]\n [jp] [/jp]"},"fullscreen":{"type":{"name":"bool"},"required":false,"description":"@name fullscreen\n@type bool\n@description\n [en]If true, the carousel will cover the whole screen.[/en]\n [jp] [/jp]"},"overscrollable":{"type":{"name":"bool"},"required":false,"description":"@name overscrollable\n@type bool\n@description\n [en]If true, the carousel will be scrollable over the edge. It will bounce back when released.[/en]\n [jp] [/jp]"},"centered":{"type":{"name":"bool"},"required":false,"description":"@name centered\n@type bool\n@description\n [en]If true, the carousel then the selected item will be in the center of the carousel instead of the beginning. Useful only when the items are smaller than the carousel.[/en]\n [jp] [/jp]"},"itemWidth":{"type":{"name":"enum","value":[{"value":"React.PropTypes.string","computed":true},{"value":"React.PropTypes.number","computed":true}]},"required":false,"description":"@name itemWidth\n@type number\n@description\n [en]ons-carousel-item's width. Only works when the direction is set to \"horizontal\".[/en]\n [jp] [/jp]"},"itemHeight":{"type":{"name":"enum","value":[{"value":"React.PropTypes.string","computed":true},{"value":"React.PropTypes.number","computed":true}]},"required":false,"description":"@name itemHeight\n@type number\n@description\n [en]ons-carousel-item's height. Only works when the direction is set to \"vertical\".[/en]\n [jp] [/jp]"},"autoScroll":{"type":{"name":"bool"},"required":false,"description":"@name autoScroll\n@type bool\n@description\n [en]If true, the carousel will be automatically scrolled to the closest item border when released.[/en]\n [jp] [/jp]"},"autoScrollRatio":{"type":{"name":"number"},"required":false,"description":"@name autoScrollRatio\n@type number\n@description\n [en]A number between 0.0 and 1.0 that specifies how much the user must drag the carousel in order for it to auto scroll to the next item.[/en]\n [jp] [/jp]"},"swipeable":{"type":{"name":"bool"},"required":false,"description":"@name swipeable\n@type bool\n@description\n [en]If true, the carousel can be scrolled by drag or swipe.[/en]\n [jp] [/jp]"},"disabled":{"type":{"name":"bool"},"required":false,"description":"@name disabled\n@type bool\n@description\n [en]If true, the carousel will be disabled.[/en]\n [jp] [/jp]"},"index":{"type":{"name":"number"},"required":false,"description":"@name index\n@type number\n@description\n [en]Specify the index of the ons-carousel-item to show. Default is 0.[/en]\n [jp] [/jp]"},"autoRefresh":{"type":{"name":"bool"},"required":false,"description":"@name autoRefresh\n@type bool\n@description\n [en]When this attribute is set the carousel will automatically refresh when the number of child nodes change.[/en]\n [jp] [/jp]"},"onPostChange":{"type":{"name":"func"},"required":false,"description":"@name onPostChange\n@type function\n@description\n [en]Called just after the current carousel item has changed.  [/en]\n [jp] [/jp]"},"onRefresh":{"type":{"name":"func"},"required":false,"description":"@name onRefresh\n@type function\n@description\n [en]Called when the carousel has been refreshed. [/en]\n [jp] [/jp]"},"onOverscroll":{"type":{"name":"func"},"required":false,"description":"@name onOverscroll\n@type function\n@description\n [en]Called when the carousel has been overscrolled. [/en]\n [jp] [/jp]"},"animationOptions":{"type":{"name":"object"},"required":false,"description":"@name animationOptions\n@type object\n@required false\n@description\n [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]\n [jp] [/jp]"}}}
